// Code generated by protoc-gen-connect-mock-server. DO NOT EDIT.
package main

import (
	connect_go "github.com/bufbuild/connect-go"
	context "context"
	"flag"
	"net/http"
	"time"
	"github.com/rs/cors"
	"golang.org/x/exp/slog"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	v1 "github.com/jasonblanchard/protoc-gen-connect-mock-server/examples/gen/examples/greet/v1"
	"github.com/jasonblanchard/protoc-gen-connect-mock-server/examples/gen/examples/greet/v1/greetv1connect"
)

func NewMockNested() *v1.Nested {
	mock := &v1.Nested{
		Test: "string",
	}
	return mock
}

func NewMockGreetRequest() *v1.GreetRequest {
	mock := &v1.GreetRequest{
		Name: "string",
	}
	return mock
}

func NewMockGreetResponse() *v1.GreetResponse {
	mock := &v1.GreetResponse{
		Greeting:   "string",
		Nested:     NewMockNested(),
		Thingies:   []*v1.Nested{NewMockNested()},
		Greetings:  []string{"string", "string", "string"},
		BoolKind:   false,
		Int32Kind:  123,
		Sint32Kind: 123,
		BytesKind:  []byte{1, 2, 3},
		FloatKind:  123,
		Status:     v1.Status_STATUS_NOT_OK,
	}
	return mock
}

func NewMockStatusRequest() *v1.StatusRequest {
	mock := &v1.StatusRequest{}
	return mock
}

func NewMockStatusResponse() *v1.StatusResponse {
	mock := &v1.StatusResponse{
		Status: v1.Status_STATUS_NOT_OK,
	}
	return mock
}

type GreetServiceMockServer struct{}

func (GreetServiceMockServer) Greet(context.Context, *connect_go.Request[v1.GreetRequest]) (*connect_go.Response[v1.GreetResponse], error) {
	resp := &connect_go.Response[v1.GreetResponse]{}
	resp.Msg = NewMockGreetResponse()
	return resp, nil
}

type StatusServiceMockServer struct{}

func (StatusServiceMockServer) Status(context.Context, *connect_go.Request[v1.StatusRequest]) (*connect_go.Response[v1.StatusResponse], error) {
	resp := &connect_go.Response[v1.StatusResponse]{}
	resp.Msg = NewMockStatusResponse()
	return resp, nil
}

func main() {
	var portVar string
	flag.StringVar(&portVar, "port", "8080", "port to run the mock server on")
	flag.StringVar(&portVar, "p", "8080", "port to run the mock server on (shorthand)")

	flag.Parse()

	mux := http.NewServeMux()

	GreetServiceserver := &GreetServiceMockServer{}
	GreetServicepath, GreetServicehandler := greetv1connect.NewGreetServiceHandler(GreetServiceserver)
	mux.Handle(GreetServicepath, WithLogging(GreetServicehandler))

	StatusServiceserver := &StatusServiceMockServer{}
	StatusServicepath, StatusServicehandler := greetv1connect.NewStatusServiceHandler(StatusServiceserver)
	mux.Handle(StatusServicepath, WithLogging(StatusServicehandler))

	corsHandler := cors.New(cors.Options{
		AllowedOrigins:   []string{"https://buf.build"},
		AllowCredentials: true,
		AllowedMethods:   []string{http.MethodPost, http.MethodOptions},
		AllowedHeaders:   []string{"*"},
	}).Handler(mux)
	slog.Info("Server starting", "port", portVar)
	http.ListenAndServe(":"+portVar, h2c.NewHandler(corsHandler, &http2.Server{}))
}

func WithLogging(h http.Handler) http.Handler {
	logFn := func(rw http.ResponseWriter, r *http.Request) {
		start := time.Now()

		h.ServeHTTP(rw, r)

		duration := time.Since(start)

		slog.Info("request", "proto", r.Proto, "method", r.Method, "host", r.Host, "uri", r.RequestURI, "remoteAddr", r.RemoteAddr, "duration", duration)
	}
	return http.HandlerFunc(logFn)
}
