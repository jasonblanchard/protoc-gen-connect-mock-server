// Code generated by protoc-gen-connect-mock-server. DO NOT EDIT.
package main

import (
	connect_go "github.com/bufbuild/connect-go"
	context "context"
	"flag"
	"net/http"
	"time"
	"github.com/rs/cors"
	"golang.org/x/exp/slog"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	"github.com/go-faker/faker/v4"
	"github.com/jasonblanchard/protoc-gen-connect-mock-server/examples/gen/examples/eliza/v1"
	"github.com/jasonblanchard/protoc-gen-connect-mock-server/examples/gen/examples/eliza/v1/elizav1connect"
)

var isDynamic bool

func getStringValue() string {
	if !isDynamic {
		return "string"
	}

	type Container struct {
		Value string
	}

	a := &Container{}
	err := faker.FakeData(a)

	if err != nil {
		return err.Error()
	}

	return a.Value
}

func getInt32Value() int32 {
	if !isDynamic {
		return 123
	}

	type Container struct {
		Value int32
	}

	a := &Container{}
	err := faker.FakeData(a)

	if err != nil {
		return 0
	}

	return a.Value
}

func getBoolValue() bool {
	if !isDynamic {
		return true
	}

	type Container struct {
		Value bool
	}

	a := &Container{}
	err := faker.FakeData(a)

	if err != nil {
		return true
	}

	return a.Value
}

func elizav1_NewMockSayRequest() *elizav1.SayRequest {
	mock := &elizav1.SayRequest{
		Sentence: getStringValue(),
	}
	return mock
}

func elizav1_NewMockSayResponse() *elizav1.SayResponse {
	mock := &elizav1.SayResponse{
		Sentence: getStringValue(),
	}
	return mock
}

type ElizaServiceMockServer struct{}

func (ElizaServiceMockServer) Say(context.Context, *connect_go.Request[elizav1.SayRequest]) (*connect_go.Response[elizav1.SayResponse], error) {
	resp := &connect_go.Response[elizav1.SayResponse]{}
	resp.Msg = elizav1_NewMockSayResponse()
	return resp, nil
}

func main() {
	var portVar string
	flag.StringVar(&portVar, "port", "8080", "port to run the mock server on")
	flag.StringVar(&portVar, "p", "8080", "port to run the mock server on (shorthand)")
	flag.BoolVar(&isDynamic, "d", false, "return dynamic values (shorthand)")

	flag.Parse()

	mux := http.NewServeMux()

	ElizaServiceserver := &ElizaServiceMockServer{}
	ElizaServicepath, ElizaServicehandler := elizav1connect.NewElizaServiceHandler(ElizaServiceserver)
	mux.Handle(ElizaServicepath, WithLogging(ElizaServicehandler))

	corsHandler := cors.New(cors.Options{
		AllowedOrigins:   []string{"https://buf.build"},
		AllowCredentials: true,
		AllowedMethods:   []string{http.MethodPost, http.MethodOptions},
		AllowedHeaders:   []string{"*"},
	}).Handler(mux)
	slog.Info("Server starting", "port", portVar)
	http.ListenAndServe(":"+portVar, h2c.NewHandler(corsHandler, &http2.Server{}))
}

func WithLogging(h http.Handler) http.Handler {
	logFn := func(rw http.ResponseWriter, r *http.Request) {
		start := time.Now()

		h.ServeHTTP(rw, r)

		duration := time.Since(start)

		slog.Info("request", "proto", r.Proto, "method", r.Method, "host", r.Host, "uri", r.RequestURI, "remoteAddr", r.RemoteAddr, "duration", duration)
	}
	return http.HandlerFunc(logFn)
}
