package main

import (
	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

// generateFile generates a _mock_server.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_connect_mock_server/main.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-connect-mock-server. DO NOT EDIT.")
	g.P()
	g.P("package main")
	g.P()
	g.P("import (")
	g.P("connect_go \"github.com/bufbuild/connect-go\"")
	g.P("context \"context\"")
	g.P("\"net/http\"")
	g.P("\"golang.org/x/net/http2/h2c\"")
	g.P("\"golang.org/x/net/http2\"")
	g.P("\"github.com/rs/cors\"")
	g.P("v1", file.GoImportPath)
	g.P("\"", file.GoImportPath.String()[1:len(file.GoImportPath.String())-1], "/", file.GoPackageName, "connect\"")
	g.P(")")

	for _, msg := range file.Messages {
		g.P("")
		g.P("func NewMock", msg.Desc.Name(), "() *v1.", msg.Desc.Name(), " {")
		g.P("mock := &v1.", msg.Desc.Name(), "{")
		for _, field := range msg.Fields {
			// TODO: Handle IsMap, Enum()

			if field.Desc.IsList() {
				if field.Desc.Message() != nil {
					g.P(field.GoName, ": ", "[]*v1.", field.Message.Desc.Name(), "{NewMock", field.Message.Desc.Name(), "()},")
				} else {
					// Otherwise, use mock scalar value
					g.P(field.GoName, ": ", "[]string{\"chello\", \"chello\", \"chello\"},") // TODO: Handle more than strings
				}
			} else {
				if field.Desc.Message() != nil {
					g.P(field.GoName, ": NewMock", field.GoName, "(),")
				} else {
					// Otherwise, use mock scalar value
					g.P(field.GoName, ": ", "\"chello\",") // TODO: Handle more than strings
				}
			}
		}
		g.P("}")
		g.P("return mock")
		g.P("}")
		g.P("")
	}

	for _, service := range file.Services {
		g.P("")
		g.P("type ", service.GoName, "MockServer ", "struct{}")
		g.P("")
		g.P("")
		for _, method := range service.Methods {
			g.P("func (", service.GoName, "MockServer) ", method.GoName, "(context.Context, *connect_go.Request[v1.", method.Desc.Input().Name(), "]) (*connect_go.Response[v1.", method.Desc.Output().Name(), "], error) {")
			g.P("resp := &connect_go.Response[v1.", method.Desc.Output().Name(), "]", "{}")
			g.P("resp.Msg = NewMock", method.Desc.Output().Name(), "()")
			g.P("return resp, nil")
			g.P("}")
		}
	}

	g.P("")
	g.P("func main() {")
	g.P("mux := http.NewServeMux()")
	for _, service := range file.Services {
		g.P("server := &", service.GoName, "MockServer{}")
		g.P("path, handler := greetv1connect.NewGreetServiceHandler(server)")
		g.P("mux.Handle(path, handler)")
	}
	
	g.P("corsHandler := cors.New(cors.Options{")
	g.P("AllowedOrigins: []string{\"https://buf.build\"},")
	g.P("AllowCredentials: true,")
	g.P("AllowedMethods:   []string{http.MethodPost, http.MethodOptions},")
	g.P("AllowedHeaders: []string{\"*\"},")
	g.P("}).Handler(mux)")
	g.P("http.ListenAndServe(\":8080\", h2c.NewHandler(corsHandler, &http2.Server{}))")
	g.P("}")

	return g
}
