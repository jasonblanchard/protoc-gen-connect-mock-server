package module

const methodTpl = `func (GreetServiceMockServer) Greet(context.Context, *connect_go.Request[v1.GreetRequest]) (*connect_go.Response[v1.GreetResponse], error) {
	resp := &connect_go.Response[v1.GreetResponse]{}
	resp.Msg = NewMockGreetResponse()
	return resp, nil
}`

const serviceTpl = `type {{.GoName}}MockServer struct{}

{{ range $method := .Methods}}
	{{ template "method" $method }}
{{ end }}
`

const fileTpl = `// Code generated by {{.PkgName}}. DO NOT EDIT.
package main

import (
	connect_go "github.com/bufbuild/connect-go"
	context "context"
	"net/http"
	"golang.org/x/net/http2/h2c"
	"golang.org/x/net/http2"
	"github.com/rs/cors"
	v1 {{ .File.GoImportPath }}
	"{{ .ConnectFilePath }}"
)

func NewMockNested() *v1.Nested {
	mock := &v1.Nested{
		Test: "chello",
	}
	return mock
}

func NewMockGreetRequest() *v1.GreetRequest {
	mock := &v1.GreetRequest{
		Name: "chello",
	}
	return mock
}

func NewMockGreetResponse() *v1.GreetResponse {
	mock := &v1.GreetResponse{
		Greeting:  "chello",
		Nested:    NewMockNested(),
		Thingies:  []*v1.Nested{NewMockNested()},
		Greetings: []string{"chello", "chello", "chello"},
	}
	return mock
}

{{range $service := .File.Services}}
	{{template "service" $service}}
{{end}}

func main() {
	mux := http.NewServeMux()
	server := &GreetServiceMockServer{}
	path, handler := greetv1connect.NewGreetServiceHandler(server)
	mux.Handle(path, handler)
	corsHandler := cors.New(cors.Options{
		AllowedOrigins:   []string{"https://buf.build"},
		AllowCredentials: true,
		AllowedMethods:   []string{http.MethodPost, http.MethodOptions},
		AllowedHeaders:   []string{"*"},
	}).Handler(mux)
	http.ListenAndServe(":8080", h2c.NewHandler(corsHandler, &http2.Server{}))
}`